/* automatically generated by rust-bindgen */

pub const LLHTTP_VERSION_MAJOR: u32 = 2;
pub const LLHTTP_VERSION_MINOR: u32 = 0;
pub const LLHTTP_VERSION_PATCH: u32 = 5;
pub const __WORDSIZE: u32 = 64;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 0;
pub const __DARWIN_ONLY_VERS_1050: u32 = 0;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_64_BIT_INO_T: &'static [u8; 9usize] = b"$INODE64\0";
pub const __DARWIN_SUF_1050: &'static [u8; 6usize] = b"$1050\0";
pub const __DARWIN_SUF_EXTSN: &'static [u8; 14usize] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __STDC_WANT_LIB_EXT1__: u32 = 1;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const RSIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
    _bindgen_union_align: [u64; 16usize],
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(
        ::std::mem::size_of::<__mbstate_t>(),
        128usize,
        concat!("Size of: ", stringify!(__mbstate_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__mbstate_t>(),
        8usize,
        concat!("Alignment of ", stringify!(__mbstate_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>())).__mbstate8 as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(__mbstate8)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__mbstate_t>()))._mbstateL as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__mbstate_t),
            "::",
            stringify!(_mbstateL)
        )
    );
}
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
#[test]
fn bindgen_test_layout___darwin_pthread_handler_rec() {
    assert_eq!(
        ::std::mem::size_of::<__darwin_pthread_handler_rec>(),
        24usize,
        concat!("Size of: ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        ::std::mem::align_of::<__darwin_pthread_handler_rec>(),
        8usize,
        concat!("Alignment of ", stringify!(__darwin_pthread_handler_rec))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__routine as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__routine)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__arg as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__arg)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<__darwin_pthread_handler_rec>())).__next as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__darwin_pthread_handler_rec),
            "::",
            stringify!(__next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_attr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_attr_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_attr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_attr_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_attr_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_attr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_cond_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_cond_t>(),
        48usize,
        concat!("Size of: ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_cond_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_cond_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_cond_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_cond_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_condattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_condattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_condattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_condattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_condattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_condattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutex_t>(),
        64usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutex_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutex_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_mutexattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_mutexattr_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_mutexattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_mutexattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_mutexattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_mutexattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_once_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_once_t>(),
        16usize,
        concat!("Size of: ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_once_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_once_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_once_t>())).__opaque as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_once_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlock_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlock_t>(),
        200usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlock_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlock_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlock_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlock_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_rwlockattr_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_rwlockattr_t>(),
        24usize,
        concat!("Size of: ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_rwlockattr_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_rwlockattr_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__sig as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_rwlockattr_t>())).__opaque as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_rwlockattr_t),
            "::",
            stringify!(__opaque)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
#[test]
fn bindgen_test_layout__opaque_pthread_t() {
    assert_eq!(
        ::std::mem::size_of::<_opaque_pthread_t>(),
        8192usize,
        concat!("Size of: ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        ::std::mem::align_of::<_opaque_pthread_t>(),
        8usize,
        concat!("Alignment of ", stringify!(_opaque_pthread_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__sig as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__sig)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_opaque_pthread_t>())).__cleanup_stack as *const _ as usize
        },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__cleanup_stack)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_opaque_pthread_t>())).__opaque as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_opaque_pthread_t),
            "::",
            stringify!(__opaque)
        )
    );
}
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type llhttp__internal_t = llhttp__internal_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llhttp__internal_s {
    pub _index: i32,
    pub _span_pos0: *mut ::std::os::raw::c_void,
    pub _span_cb0: *mut ::std::os::raw::c_void,
    pub error: i32,
    pub reason: *const ::std::os::raw::c_char,
    pub error_pos: *const ::std::os::raw::c_char,
    pub data: *mut ::std::os::raw::c_void,
    pub _current: *mut ::std::os::raw::c_void,
    pub content_length: u64,
    pub type_: u8,
    pub method: u8,
    pub http_major: u8,
    pub http_minor: u8,
    pub header_state: u8,
    pub flags: u16,
    pub upgrade: u8,
    pub status_code: u16,
    pub finish: u8,
    pub settings: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_llhttp__internal_s() {
    assert_eq!(
        ::std::mem::size_of::<llhttp__internal_s>(),
        96usize,
        concat!("Size of: ", stringify!(llhttp__internal_s))
    );
    assert_eq!(
        ::std::mem::align_of::<llhttp__internal_s>(),
        8usize,
        concat!("Alignment of ", stringify!(llhttp__internal_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>()))._index as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_index)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>()))._span_pos0 as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_span_pos0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>()))._span_cb0 as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_span_cb0)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).error as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).reason as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(reason)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).error_pos as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(error_pos)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).data as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>()))._current as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(_current)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp__internal_s>())).content_length as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(content_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).type_ as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).method as *const _ as usize },
        73usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(method)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).http_major as *const _ as usize },
        74usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(http_major)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).http_minor as *const _ as usize },
        75usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(http_minor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).header_state as *const _ as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(header_state)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).flags as *const _ as usize },
        78usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).upgrade as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(upgrade)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).status_code as *const _ as usize },
        82usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(status_code)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).finish as *const _ as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(finish)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp__internal_s>())).settings as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp__internal_s),
            "::",
            stringify!(settings)
        )
    );
}
extern "C" {
    pub fn llhttp__internal_init(s: *mut llhttp__internal_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llhttp__internal_execute(
        s: *mut llhttp__internal_t,
        p: *const ::std::os::raw::c_char,
        endp: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
pub const llhttp_errno_HPE_OK: llhttp_errno = 0;
pub const llhttp_errno_HPE_INTERNAL: llhttp_errno = 1;
pub const llhttp_errno_HPE_STRICT: llhttp_errno = 2;
pub const llhttp_errno_HPE_LF_EXPECTED: llhttp_errno = 3;
pub const llhttp_errno_HPE_UNEXPECTED_CONTENT_LENGTH: llhttp_errno = 4;
pub const llhttp_errno_HPE_CLOSED_CONNECTION: llhttp_errno = 5;
pub const llhttp_errno_HPE_INVALID_METHOD: llhttp_errno = 6;
pub const llhttp_errno_HPE_INVALID_URL: llhttp_errno = 7;
pub const llhttp_errno_HPE_INVALID_CONSTANT: llhttp_errno = 8;
pub const llhttp_errno_HPE_INVALID_VERSION: llhttp_errno = 9;
pub const llhttp_errno_HPE_INVALID_HEADER_TOKEN: llhttp_errno = 10;
pub const llhttp_errno_HPE_INVALID_CONTENT_LENGTH: llhttp_errno = 11;
pub const llhttp_errno_HPE_INVALID_CHUNK_SIZE: llhttp_errno = 12;
pub const llhttp_errno_HPE_INVALID_STATUS: llhttp_errno = 13;
pub const llhttp_errno_HPE_INVALID_EOF_STATE: llhttp_errno = 14;
pub const llhttp_errno_HPE_INVALID_TRANSFER_ENCODING: llhttp_errno = 15;
pub const llhttp_errno_HPE_CB_MESSAGE_BEGIN: llhttp_errno = 16;
pub const llhttp_errno_HPE_CB_HEADERS_COMPLETE: llhttp_errno = 17;
pub const llhttp_errno_HPE_CB_MESSAGE_COMPLETE: llhttp_errno = 18;
pub const llhttp_errno_HPE_CB_CHUNK_HEADER: llhttp_errno = 19;
pub const llhttp_errno_HPE_CB_CHUNK_COMPLETE: llhttp_errno = 20;
pub const llhttp_errno_HPE_PAUSED: llhttp_errno = 21;
pub const llhttp_errno_HPE_PAUSED_UPGRADE: llhttp_errno = 22;
pub const llhttp_errno_HPE_USER: llhttp_errno = 23;
pub type llhttp_errno = u32;
pub use self::llhttp_errno as llhttp_errno_t;
pub const llhttp_flags_F_CONNECTION_KEEP_ALIVE: llhttp_flags = 1;
pub const llhttp_flags_F_CONNECTION_CLOSE: llhttp_flags = 2;
pub const llhttp_flags_F_CONNECTION_UPGRADE: llhttp_flags = 4;
pub const llhttp_flags_F_CHUNKED: llhttp_flags = 8;
pub const llhttp_flags_F_UPGRADE: llhttp_flags = 16;
pub const llhttp_flags_F_CONTENT_LENGTH: llhttp_flags = 32;
pub const llhttp_flags_F_SKIPBODY: llhttp_flags = 64;
pub const llhttp_flags_F_TRAILING: llhttp_flags = 128;
pub const llhttp_flags_F_LENIENT: llhttp_flags = 256;
pub const llhttp_flags_F_TRANSFER_ENCODING: llhttp_flags = 512;
pub type llhttp_flags = u32;
pub use self::llhttp_flags as llhttp_flags_t;
pub const llhttp_type_HTTP_BOTH: llhttp_type = 0;
pub const llhttp_type_HTTP_REQUEST: llhttp_type = 1;
pub const llhttp_type_HTTP_RESPONSE: llhttp_type = 2;
pub type llhttp_type = u32;
pub use self::llhttp_type as llhttp_type_t;
pub const llhttp_finish_HTTP_FINISH_SAFE: llhttp_finish = 0;
pub const llhttp_finish_HTTP_FINISH_SAFE_WITH_CB: llhttp_finish = 1;
pub const llhttp_finish_HTTP_FINISH_UNSAFE: llhttp_finish = 2;
pub type llhttp_finish = u32;
pub use self::llhttp_finish as llhttp_finish_t;
pub const llhttp_method_HTTP_DELETE: llhttp_method = 0;
pub const llhttp_method_HTTP_GET: llhttp_method = 1;
pub const llhttp_method_HTTP_HEAD: llhttp_method = 2;
pub const llhttp_method_HTTP_POST: llhttp_method = 3;
pub const llhttp_method_HTTP_PUT: llhttp_method = 4;
pub const llhttp_method_HTTP_CONNECT: llhttp_method = 5;
pub const llhttp_method_HTTP_OPTIONS: llhttp_method = 6;
pub const llhttp_method_HTTP_TRACE: llhttp_method = 7;
pub const llhttp_method_HTTP_COPY: llhttp_method = 8;
pub const llhttp_method_HTTP_LOCK: llhttp_method = 9;
pub const llhttp_method_HTTP_MKCOL: llhttp_method = 10;
pub const llhttp_method_HTTP_MOVE: llhttp_method = 11;
pub const llhttp_method_HTTP_PROPFIND: llhttp_method = 12;
pub const llhttp_method_HTTP_PROPPATCH: llhttp_method = 13;
pub const llhttp_method_HTTP_SEARCH: llhttp_method = 14;
pub const llhttp_method_HTTP_UNLOCK: llhttp_method = 15;
pub const llhttp_method_HTTP_BIND: llhttp_method = 16;
pub const llhttp_method_HTTP_REBIND: llhttp_method = 17;
pub const llhttp_method_HTTP_UNBIND: llhttp_method = 18;
pub const llhttp_method_HTTP_ACL: llhttp_method = 19;
pub const llhttp_method_HTTP_REPORT: llhttp_method = 20;
pub const llhttp_method_HTTP_MKACTIVITY: llhttp_method = 21;
pub const llhttp_method_HTTP_CHECKOUT: llhttp_method = 22;
pub const llhttp_method_HTTP_MERGE: llhttp_method = 23;
pub const llhttp_method_HTTP_MSEARCH: llhttp_method = 24;
pub const llhttp_method_HTTP_NOTIFY: llhttp_method = 25;
pub const llhttp_method_HTTP_SUBSCRIBE: llhttp_method = 26;
pub const llhttp_method_HTTP_UNSUBSCRIBE: llhttp_method = 27;
pub const llhttp_method_HTTP_PATCH: llhttp_method = 28;
pub const llhttp_method_HTTP_PURGE: llhttp_method = 29;
pub const llhttp_method_HTTP_MKCALENDAR: llhttp_method = 30;
pub const llhttp_method_HTTP_LINK: llhttp_method = 31;
pub const llhttp_method_HTTP_UNLINK: llhttp_method = 32;
pub const llhttp_method_HTTP_SOURCE: llhttp_method = 33;
pub const llhttp_method_HTTP_PRI: llhttp_method = 34;
pub type llhttp_method = u32;
pub use self::llhttp_method as llhttp_method_t;
pub type size_t = ::std::os::raw::c_ulong;
pub type rsize_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
pub type max_align_t = u128;
pub type llhttp_t = llhttp__internal_t;
pub type llhttp_settings_t = llhttp_settings_s;
pub type llhttp_data_cb = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *mut llhttp_t,
        at: *const ::std::os::raw::c_char,
        length: size_t,
    ) -> ::std::os::raw::c_int,
>;
pub type llhttp_cb =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut llhttp_t) -> ::std::os::raw::c_int>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct llhttp_settings_s {
    pub on_message_begin: llhttp_cb,
    pub on_url: llhttp_data_cb,
    pub on_status: llhttp_data_cb,
    pub on_header_field: llhttp_data_cb,
    pub on_header_value: llhttp_data_cb,
    pub on_headers_complete: llhttp_cb,
    pub on_body: llhttp_data_cb,
    pub on_message_complete: llhttp_cb,
    pub on_chunk_header: llhttp_cb,
    pub on_chunk_complete: llhttp_cb,
}
#[test]
fn bindgen_test_layout_llhttp_settings_s() {
    assert_eq!(
        ::std::mem::size_of::<llhttp_settings_s>(),
        80usize,
        concat!("Size of: ", stringify!(llhttp_settings_s))
    );
    assert_eq!(
        ::std::mem::align_of::<llhttp_settings_s>(),
        8usize,
        concat!("Alignment of ", stringify!(llhttp_settings_s))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp_settings_s>())).on_message_begin as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_message_begin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp_settings_s>())).on_url as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp_settings_s>())).on_status as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_status)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp_settings_s>())).on_header_field as *const _ as usize
        },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_header_field)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp_settings_s>())).on_header_value as *const _ as usize
        },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_header_value)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp_settings_s>())).on_headers_complete as *const _ as usize
        },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_headers_complete)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<llhttp_settings_s>())).on_body as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_body)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp_settings_s>())).on_message_complete as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_message_complete)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp_settings_s>())).on_chunk_header as *const _ as usize
        },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_header)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<llhttp_settings_s>())).on_chunk_complete as *const _ as usize
        },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(llhttp_settings_s),
            "::",
            stringify!(on_chunk_complete)
        )
    );
}
extern "C" {
    pub fn llhttp_init(
        parser: *mut llhttp_t,
        type_: llhttp_type_t,
        settings: *const llhttp_settings_t,
    );
}
extern "C" {
    pub fn llhttp_settings_init(settings: *mut llhttp_settings_t);
}
extern "C" {
    pub fn llhttp_execute(
        parser: *mut llhttp_t,
        data: *const ::std::os::raw::c_char,
        len: size_t,
    ) -> llhttp_errno_t;
}
extern "C" {
    pub fn llhttp_finish(parser: *mut llhttp_t) -> llhttp_errno_t;
}
extern "C" {
    pub fn llhttp_message_needs_eof(parser: *const llhttp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llhttp_should_keep_alive(parser: *const llhttp_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn llhttp_pause(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_resume(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_resume_after_upgrade(parser: *mut llhttp_t);
}
extern "C" {
    pub fn llhttp_get_errno(parser: *const llhttp_t) -> llhttp_errno_t;
}
extern "C" {
    pub fn llhttp_get_error_reason(parser: *const llhttp_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llhttp_set_error_reason(parser: *mut llhttp_t, reason: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn llhttp_get_error_pos(parser: *const llhttp_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llhttp_errno_name(err: llhttp_errno_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llhttp_method_name(method: llhttp_method_t) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn llhttp_set_lenient(parser: *mut llhttp_t, enabled: ::std::os::raw::c_int);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(
        ::std::mem::size_of::<__va_list_tag>(),
        24usize,
        concat!("Size of: ", stringify!(__va_list_tag))
    );
    assert_eq!(
        ::std::mem::align_of::<__va_list_tag>(),
        8usize,
        concat!("Alignment of ", stringify!(__va_list_tag))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).gp_offset as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(gp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).fp_offset as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(fp_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).overflow_arg_area as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(overflow_arg_area)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__va_list_tag>())).reg_save_area as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__va_list_tag),
            "::",
            stringify!(reg_save_area)
        )
    );
}
